name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: portfolioai
          POSTGRES_DB: portfolioai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Run linting
      run: |
        cd backend
        ruff check app/ tests/
        black --check app/ tests/
        mypy app/
    
    - name: Run tests
      run: |
        cd backend
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: postgresql://portfolioai:password@localhost:5432/portfolioai_test
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET: test-secret-key
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  ml-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install ML dependencies
      run: |
        cd ml-models/src
        pip install -r requirements.txt
    
    - name: Run ML model tests
      run: |
        cd ml-models/src
        python -c "import sklearn; print('scikit-learn version:', sklearn.__version__)"
        python -c "import coremltools; print('coremltools version:', coremltools.__version__)"
        python train_sentiment.py
        python train_price_signal.py
        python export_coreml.py
    
    - name: Upload ML artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ml-models
        path: ml-models/models/*.mlmodel

  ios-build:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Build iOS app
      run: |
        cd ios-app
        xcodebuild -project PortfolioAI.xcodeproj -scheme PortfolioAI -destination 'platform=iOS Simulator,name=iPhone 15' build
    
    - name: Run iOS tests
      run: |
        cd ios-app
        xcodebuild -project PortfolioAI.xcodeproj -scheme PortfolioAI -destination 'platform=iOS Simulator,name=iPhone 15' test

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, ml-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          portfolioai/backend:latest
          portfolioai/backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment commands here
        # This would typically involve:
        # - Updating Kubernetes manifests
        # - Rolling out new deployment
        # - Running health checks
        # - Notifying team

  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add actual deployment commands here
        # This would typically involve:
        # - Blue-green deployment
        # - Database migrations
        # - Health checks
        # - Rollback procedures
        # - Monitoring alerts

  notify:
    runs-on: ubuntu-latest
    needs: [backend-tests, ml-tests, ios-build, security-scan]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.backend-tests.result == 'success' && needs.ml-tests.result == 'success' && needs.ios-build.result == 'success' }}
      run: |
        echo "All tests passed! üéâ"
        # Add notification logic here (Slack, email, etc.)
    
    - name: Notify on failure
      if: ${{ needs.backend-tests.result == 'failure' || needs.ml-tests.result == 'failure' || needs.ios-build.result == 'failure' }}
      run: |
        echo "Tests failed! ‚ùå"
        # Add notification logic here (Slack, email, etc.)
